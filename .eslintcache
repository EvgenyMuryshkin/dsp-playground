[{"C:\\code\\dsp-playground\\src\\index.tsx":"1","C:\\code\\dsp-playground\\src\\reportWebVitals.ts":"2","C:\\code\\dsp-playground\\src\\App.tsx":"3","C:\\code\\dsp-playground\\src\\lib\\signal.ts":"4","C:\\code\\dsp-playground\\src\\lib\\generate.ts":"5","C:\\code\\dsp-playground\\src\\lib\\sampling.ts":"6","C:\\code\\dsp-playground\\src\\components\\index.ts":"7","C:\\code\\dsp-playground\\src\\components\\time-domain-canvas\\time-domain-canvas.tsx":"8","C:\\code\\dsp-playground\\src\\lib\\index.ts":"9","C:\\code\\dsp-playground\\src\\lessons\\index.ts":"10","C:\\code\\dsp-playground\\src\\lessons\\lesson1.tsx":"11","C:\\code\\dsp-playground\\src\\lib\\wave.ts":"12","C:\\code\\dsp-playground\\src\\components\\wave-editor\\wave-editor.tsx":"13","C:\\code\\dsp-playground\\src\\components\\signal-editor\\signal-editor.tsx":"14","C:\\code\\dsp-playground\\src\\lib\\assign.ts":"15","C:\\code\\dsp-playground\\src\\lib\\convert.ts":"16","C:\\code\\dsp-playground\\src\\components\\glyph\\glyph.tsx":"17","C:\\code\\dsp-playground\\src\\components\\complex-canvas\\complex-canvas.tsx":"18","C:\\code\\dsp-playground\\src\\components\\rows\\tr-number-slider.tsx":"19","C:\\code\\dsp-playground\\src\\lessons\\lesson.ts":"20","C:\\code\\dsp-playground\\src\\lessons\\lesson-parameters-control.tsx":"21","C:\\code\\dsp-playground\\src\\lib\\min-max.ts":"22","C:\\code\\dsp-playground\\src\\components\\rows\\tr-checkbox.tsx":"23","C:\\code\\dsp-playground\\src\\lib\\g2d.ts":"24","C:\\code\\dsp-playground\\src\\components\\freq-domain-canvas\\freq-domain-canvas.tsx":"25","C:\\code\\dsp-playground\\src\\lessons\\lesson2.tsx":"26","C:\\code\\dsp-playground\\src\\lib\\ft\\index.ts":"27","C:\\code\\dsp-playground\\src\\lib\\ft\\fft.ts":"28","C:\\code\\dsp-playground\\src\\lib\\ft\\ft.ts":"29","C:\\code\\dsp-playground\\src\\lib\\ft\\dft.ts":"30","C:\\code\\dsp-playground\\src\\components\\sampling-canvas\\sampling-canvas.tsx":"31","C:\\code\\dsp-playground\\src\\components\\drawing-canvas\\drawing-canvas.tsx":"32","C:\\code\\dsp-playground\\src\\lessons\\lesson3.tsx":"33","C:\\code\\dsp-playground\\src\\lib\\buffer-stream.ts":"34","C:\\code\\dsp-playground\\src\\lib\\clone.ts":"35","C:\\code\\dsp-playground\\src\\lib\\filter.ts":"36","C:\\code\\dsp-playground\\src\\lessons\\lesson-base.tsx":"37","C:\\code\\dsp-playground\\src\\lessons\\lesson0.tsx":"38"},{"size":500,"mtime":499162500000,"results":"39","hashOfConfig":"40"},{"size":425,"mtime":499162500000,"results":"41","hashOfConfig":"40"},{"size":1256,"mtime":1618743194745,"results":"42","hashOfConfig":"40"},{"size":121,"mtime":1611226053769,"results":"43","hashOfConfig":"40"},{"size":1095,"mtime":1618485292481,"results":"44","hashOfConfig":"40"},{"size":1054,"mtime":1611824847924,"results":"45","hashOfConfig":"40"},{"size":427,"mtime":1611913985955,"results":"46","hashOfConfig":"40"},{"size":3700,"mtime":1618732207219,"results":"47","hashOfConfig":"40"},{"size":298,"mtime":1611918618001,"results":"48","hashOfConfig":"40"},{"size":109,"mtime":1611914037864,"results":"49","hashOfConfig":"40"},{"size":2108,"mtime":1618731346795,"results":"50","hashOfConfig":"40"},{"size":198,"mtime":1611481623387,"results":"51","hashOfConfig":"40"},{"size":2779,"mtime":1618659164288,"results":"52","hashOfConfig":"40"},{"size":2261,"mtime":1611655725431,"results":"53","hashOfConfig":"40"},{"size":580,"mtime":1611226791725,"results":"54","hashOfConfig":"40"},{"size":310,"mtime":1611295688037,"results":"55","hashOfConfig":"40"},{"size":1005,"mtime":1611371200480,"results":"56","hashOfConfig":"40"},{"size":6233,"mtime":1618742815281,"results":"57","hashOfConfig":"40"},{"size":1850,"mtime":1618573019715,"results":"58","hashOfConfig":"40"},{"size":403,"mtime":1618731157033,"results":"59","hashOfConfig":"40"},{"size":2120,"mtime":1618731176522,"results":"60","hashOfConfig":"40"},{"size":65,"mtime":1611465249195,"results":"61","hashOfConfig":"40"},{"size":711,"mtime":1611482051174,"results":"62","hashOfConfig":"40"},{"size":904,"mtime":1611740805410,"results":"63","hashOfConfig":"40"},{"size":5739,"mtime":1618731737467,"results":"64","hashOfConfig":"40"},{"size":2473,"mtime":1618568287143,"results":"65","hashOfConfig":"40"},{"size":66,"mtime":1611658188203,"results":"66","hashOfConfig":"40"},{"size":2089,"mtime":1612432360246,"results":"67","hashOfConfig":"40"},{"size":2090,"mtime":1618568375564,"results":"68","hashOfConfig":"40"},{"size":751,"mtime":1612420371485,"results":"69","hashOfConfig":"40"},{"size":3553,"mtime":1611998700746,"results":"70","hashOfConfig":"40"},{"size":4424,"mtime":1618485556766,"results":"71","hashOfConfig":"40"},{"size":2320,"mtime":1618731353839,"results":"72","hashOfConfig":"40"},{"size":457,"mtime":1618485305775,"results":"73","hashOfConfig":"40"},{"size":124,"mtime":1611918608474,"results":"74","hashOfConfig":"40"},{"size":395,"mtime":1611990659638,"results":"75","hashOfConfig":"40"},{"size":541,"mtime":1618658222546,"results":"76","hashOfConfig":"40"},{"size":1984,"mtime":1618743211670,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1xxa9kr",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\code\\dsp-playground\\src\\index.tsx",[],["162","163"],"C:\\code\\dsp-playground\\src\\reportWebVitals.ts",[],"C:\\code\\dsp-playground\\src\\App.tsx",["164","165","166","167","168"],"C:\\code\\dsp-playground\\src\\lib\\signal.ts",[],"C:\\code\\dsp-playground\\src\\lib\\generate.ts",[],"C:\\code\\dsp-playground\\src\\lib\\sampling.ts",[],"C:\\code\\dsp-playground\\src\\components\\index.ts",[],"C:\\code\\dsp-playground\\src\\components\\time-domain-canvas\\time-domain-canvas.tsx",[],"C:\\code\\dsp-playground\\src\\lib\\index.ts",[],"C:\\code\\dsp-playground\\src\\lessons\\index.ts",[],"C:\\code\\dsp-playground\\src\\lessons\\lesson1.tsx",["169"],"import React, { Component } from \"react\";\r\nimport { SignalEditor, TimeDomainCanvas, ComplexCanvas, IWaveEditorConfig, FreqDomainCanvas } from \"../components\";\r\nimport { Generate, Sampling, Signal } from \"../lib\";\r\nimport { LessonParameters } from \"./lesson\";\r\nimport { LessonBase } from \"./lesson-base\";\r\nimport { LessonParametersControl } from \"./lesson-parameters-control\";\r\n\r\ninterface IState {\r\n    signal: Signal;\r\n    lessonParameters: LessonParameters;\r\n}\r\n\r\nexport class Lesson1 extends LessonBase<{}, IState> {\r\n    constructor(props: {}) {\r\n        super(props)\r\n        this.state = {\r\n            lessonParameters: new LessonParameters(),\r\n            signal: new Signal([\r\n                Generate.complexSignal(5, 1),\r\n                Generate.complexSignal(2, 3)\r\n            ])\r\n        }\r\n    }\r\n\r\n    renderControls() {\r\n        const { signal, lessonParameters } = this.state;\r\n\r\n        const lessonConfig: IWaveEditorConfig = {\r\n            amplitude: { min: 0, max: 10 },\r\n            freqHz: { min: -20, max: 20 },\r\n            phaseRad: { min: 0, max: 2 * Math.PI }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <LessonParametersControl parameters={lessonParameters} onChange={(p) => this.setState({ lessonParameters: p })} />\r\n                <SignalEditor signal={signal} editorConfig={lessonConfig} onChange={s => this.setState({ signal: s })} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderContent() {\r\n        const { signal, lessonParameters } = this.state;\r\n        const { samplingRate, duration, stretch, showWaves } = lessonParameters;\r\n        const samples = Sampling.sample(signal, samplingRate);\r\n\r\n        return (\r\n            <div>\r\n                <TimeDomainCanvas signal={signal} samplingRate={samplingRate} duration={duration} />\r\n                <ComplexCanvas signal={signal} samplingRate={samplingRate} duration={duration} stretch={stretch} showWaves={showWaves} />\r\n                <FreqDomainCanvas samples={samples} type={lessonParameters.type} absValues={lessonParameters.absValues} />\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\code\\dsp-playground\\src\\lib\\wave.ts",[],"C:\\code\\dsp-playground\\src\\components\\wave-editor\\wave-editor.tsx",[],"C:\\code\\dsp-playground\\src\\components\\signal-editor\\signal-editor.tsx",[],"C:\\code\\dsp-playground\\src\\lib\\assign.ts",[],"C:\\code\\dsp-playground\\src\\lib\\convert.ts",[],"C:\\code\\dsp-playground\\src\\components\\glyph\\glyph.tsx",[],"C:\\code\\dsp-playground\\src\\components\\complex-canvas\\complex-canvas.tsx",[],"C:\\code\\dsp-playground\\src\\components\\rows\\tr-number-slider.tsx",[],"C:\\code\\dsp-playground\\src\\lessons\\lesson.ts",[],"C:\\code\\dsp-playground\\src\\lessons\\lesson-parameters-control.tsx",["170","171"],"import React, { Component } from \"react\";\r\nimport { TrCheckbox } from \"../components\";\r\nimport { TrNumberSlider } from \"../components/rows/tr-number-slider\";\r\nimport { Assign, ftType } from \"../lib\";\r\nimport { LessonParameters } from \"./lesson\";\r\nimport \"./lesson-parameters-control.scss\";\r\n\r\ninterface IProps {\r\n    parameters: LessonParameters;\r\n    onDiff?: (diff: Partial<LessonParameters>) => void;\r\n    onChange?: (parameters: LessonParameters) => void;\r\n}\r\n\r\nexport class LessonParametersControl extends Component<IProps> {\r\n    render() {\r\n        const { parameters, onDiff, onChange } = this.props;\r\n        const modifed = (diff: Partial<LessonParameters>) => {\r\n            onDiff?.(diff);\r\n            onChange?.(Assign.recursive(parameters, diff));\r\n        };\r\n\r\n        var bitsValue = Math.log2(parameters.samplingRate);\r\n        const bits = <TrNumberSlider title=\"Sampling Bits 2 ^ \" value={bitsValue} minMax={({ min: 1, max: 11 })} onChange={v => modifed({ samplingRate: Math.pow(2, v) })} />\r\n        const samples = <TrNumberSlider title=\"Sampling Rate\" value={parameters.samplingRate} minMax={({ min: 1, max: 2048 })} onChange={v => modifed({ samplingRate: v })} />\r\n\r\n        return (\r\n            <div className=\"lesson-parameters\">\r\n                <table>\r\n                    <tbody>\r\n                        {parameters.type == ftType.FFT && bits}\r\n                        {parameters.type == ftType.DFT && samples}\r\n                        <TrNumberSlider title=\"Duration\" value={parameters.duration} minMax={({ min: 1, max: 20 })} onChange={v => modifed({ duration: v })} />\r\n                        <TrNumberSlider title=\"Stretch\" value={parameters.stretch} minMax={({ min: 1, max: 20 })} onChange={v => modifed({ stretch: v })} />\r\n                        <TrCheckbox title=\"Show Waves\" value={parameters.showWaves} onChange={v => modifed({ showWaves: v })} />\r\n                        <TrCheckbox title=\"Abs Values\" value={parameters.absValues} onChange={v => modifed({ absValues: v })} />\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\code\\dsp-playground\\src\\lib\\min-max.ts",[],"C:\\code\\dsp-playground\\src\\components\\rows\\tr-checkbox.tsx",[],"C:\\code\\dsp-playground\\src\\lib\\g2d.ts",[],"C:\\code\\dsp-playground\\src\\components\\freq-domain-canvas\\freq-domain-canvas.tsx",["172","173","174","175","176","177","178"],"import { Component } from \"react\";\r\nimport { Context } from \"vm\";\r\nimport { CanvasTools, Convert, DFT, FFT, ftDirection, ftType, Generate, IPoint2D, Sampling, Signal } from \"../../lib\";\r\nimport { IComplexNumber } from \"../../lib/complex\";\r\nimport \"./freq-domain-canvas.scss\";\r\n\r\ninterface IProps {\r\n    samples: IComplexNumber[];\r\n    type: ftType;\r\n    absValues: boolean;\r\n}\r\n\r\ninterface IFreq2D {\r\n    x: number;\r\n    f: IComplexNumber;\r\n}\r\n\r\ninterface IState {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport class FreqDomainCanvas extends Component<IProps, IState> {\r\n    rCanvas: HTMLCanvasElement | null = null;\r\n    iCanvas: HTMLCanvasElement | null = null;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            width: 1024,\r\n            height: 300\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.drawFreqDomain();\r\n    }\r\n\r\n    drawGrid(ctx: CanvasRenderingContext2D) {\r\n        const { width, height } = this.state;\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        ctx.lineWidth = 1;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, height / 2);\r\n        ctx.lineTo(width, height / 2);\r\n        ctx.strokeStyle = \"#000000\";\r\n        ctx.stroke();\r\n\r\n        ctx.moveTo(width / 2, 0);\r\n        ctx.lineTo(width / 2, height);\r\n        ctx.strokeStyle = \"#000000\";\r\n        ctx.stroke();\r\n    }\r\n\r\n    drawFreqDomain() {\r\n        const { type, absValues } = this.props;\r\n        const { width, height } = this.state;\r\n        const { rCanvas, iCanvas } = this;\r\n\r\n        const rCtx = rCanvas?.getContext(\"2d\");\r\n        const iCtx = iCanvas?.getContext(\"2d\");\r\n\r\n        rCtx && this.drawGrid(rCtx);\r\n        iCtx && this.drawGrid(iCtx);\r\n\r\n        const { samples } = this.props;\r\n        if (!samples) return;\r\n\r\n        const yAxis = height / 2;\r\n        const rawSpectre = type == ftType.DFT\r\n            ? DFT.transform(samples, ftDirection.Forward)\r\n            : FFT.transform(samples, ftDirection.Forward);\r\n\r\n        console.log(\"Raw spectre:\", rawSpectre);\r\n\r\n        const samplingRate = samples.length;\r\n        // place negative freqs to the left\r\n        const fft = [...rawSpectre.slice(samplingRate / 2, samplingRate), ...rawSpectre.slice(0, (samplingRate / 2))];\r\n\r\n        if (fft.length != rawSpectre.length) throw new Error(\"fft length is screwed up\");\r\n\r\n        const rawSpectrePart = (\r\n            ctx: CanvasRenderingContext2D,\r\n            source: IComplexNumber[],\r\n            data: (v: IComplexNumber) => number) => {\r\n\r\n            const maxY = Math.max(...fft.map(v => data(v)));\r\n            const minY = Math.min(...fft.map(v => data(v)));\r\n            const absMaxY = Math.max(Math.abs(maxY), Math.abs(minY));\r\n\r\n            const maxScaleY = yAxis - 25;\r\n            const scaleY = Convert.between((yAxis - 25) / absMaxY, 0.1, maxScaleY);\r\n            const scaleX = width / samplingRate;\r\n\r\n            ctx.lineWidth = 1;\r\n            ctx.imageSmoothingEnabled = true;\r\n\r\n            const translate = (x: number, p: IComplexNumber): IPoint2D => {\r\n                return {\r\n                    x: scaleX * x,\r\n                    y: yAxis - scaleY * data(p)\r\n                };\r\n            }\r\n\r\n            ctx.beginPath();\r\n\r\n            for (let i = 0; i < source.length; i++) {\r\n                const from = translate(i, { r: 0, i: 0 });\r\n                const to = translate(i, source[i]);\r\n\r\n                ctx.moveTo(from.x, from.y);\r\n                ctx.lineTo(to.x, to.y);\r\n            }\r\n\r\n            ctx.strokeStyle = \"#ff0000\";\r\n            ctx.stroke();\r\n\r\n            const maxLine = translate(0, { r: maxY, i: maxY });\r\n            CanvasTools.drawMaxLine(ctx, maxY, maxLine.y, width);\r\n\r\n            const minLine = translate(0, { r: minY, i: minY });\r\n            CanvasTools.drawMinLine(ctx, minY, minLine.y, width);\r\n        }\r\n\r\n        if (rCtx && absValues) {\r\n            rawSpectrePart(rCtx, fft, p => Math.sqrt(p.r * p.r + p.i * p.i));\r\n        }\r\n        else if (rCtx && iCtx) {\r\n            // real part of spectre\r\n            rawSpectrePart(rCtx, fft, p => p.r);\r\n\r\n            // im part of spectre\r\n            rawSpectrePart(iCtx, fft, p => p.i);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { absValues } = this.props;\r\n        const { width, height } = this.state;\r\n\r\n        if (absValues) {\r\n            return (\r\n                <div>\r\n                    <div>Abs</div>\r\n                    <canvas\r\n                        width={width}\r\n                        height={height}\r\n                        className=\"freq-domain-canvas\"\r\n                        ref={(r) => {\r\n                            this.rCanvas = r;\r\n                            this.drawFreqDomain();\r\n                        }}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <div>Re</div>\r\n                    <canvas\r\n                        width={width}\r\n                        height={height}\r\n                        className=\"freq-domain-canvas\"\r\n                        ref={(r) => {\r\n                            this.rCanvas = r;\r\n                            this.drawFreqDomain();\r\n                        }}\r\n                    />\r\n                    <div>Im</div>\r\n                    <canvas\r\n                        width={width}\r\n                        height={height}\r\n                        className=\"freq-domain-canvas\"\r\n                        ref={(r) => {\r\n                            this.iCanvas = r;\r\n                            this.drawFreqDomain();\r\n                        }}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}","C:\\code\\dsp-playground\\src\\lessons\\lesson2.tsx",["179","180","181","182","183"],"import React, { Component } from \"react\";\r\nimport { SignalEditor, TimeDomainCanvas, ComplexCanvas, IWaveEditorConfig, FreqDomainCanvas, SamplingCanvas } from \"../components\";\r\nimport { DFT, FFT, ftDirection, Generate, Sampling, Signal } from \"../lib\";\r\nimport { LessonParameters } from \"./lesson\";\r\nimport { LessonParametersControl } from \"./lesson-parameters-control\";\r\n\r\ninterface IState {\r\n    signal: Signal;\r\n    lessonParameters: LessonParameters;\r\n}\r\n\r\nexport class Lesson2 extends Component<{}, IState> {\r\n    constructor(props: {}) {\r\n        super(props)\r\n        this.state = {\r\n            lessonParameters: new LessonParameters({\r\n                samplingRate: 1024,\r\n                duration: 1,\r\n                stretch: 20\r\n            }),\r\n            signal: new Signal([\r\n                Generate.realSignal(5, 10)\r\n            ])\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { signal, lessonParameters } = this.state;\r\n        const { samplingRate, duration, stretch, showWaves } = lessonParameters;\r\n\r\n        const lessonConfig: IWaveEditorConfig = {\r\n            amplitude: { min: 0, max: 10 },\r\n            freqHz: { min: -1024, max: 1024 },\r\n            phaseRad: { min: 0, max: 2 * Math.PI }\r\n        };\r\n\r\n        const samples = Sampling.sample(signal, samplingRate);\r\n\r\n        const rawSpectre = FFT.transform(samples, ftDirection.Forward);\r\n        const reconstructed = FFT.transform(rawSpectre, ftDirection.Backward);\r\n\r\n        console.log(\"Samples:\", samples);\r\n        console.log(\"Reconstructed:\", reconstructed);\r\n        return (\r\n            <div className=\"lesson-layout\">\r\n                <div>\r\n                    <LessonParametersControl parameters={lessonParameters} onChange={(p) => this.setState({ lessonParameters: p })} />\r\n                    <SignalEditor signal={signal} editorConfig={lessonConfig} onChange={s => this.setState({ signal: s })} />\r\n                </div>\r\n                <div className=\"lesson-layout-visual\">\r\n                    <TimeDomainCanvas signal={signal} samplingRate={samplingRate} duration={duration} />\r\n                    {/*\r\n                    <ComplexCanvas signal={signal} samplingRate={samplingRate} duration={duration} stretch={stretch} showWaves={showWaves} />\r\n                    <FreqDomainCanvas samples={samples} />\r\n                    */}\r\n                    <SamplingCanvas samples={reconstructed} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\code\\dsp-playground\\src\\lib\\ft\\index.ts",[],"C:\\code\\dsp-playground\\src\\lib\\ft\\fft.ts",[],"C:\\code\\dsp-playground\\src\\lib\\ft\\ft.ts",[],"C:\\code\\dsp-playground\\src\\lib\\ft\\dft.ts",[],"C:\\code\\dsp-playground\\src\\components\\sampling-canvas\\sampling-canvas.tsx",["184","185","186"],"import { Component } from \"react\";\r\nimport { CanvasTools, Convert, Generate, IPoint2D, Sampling, Signal } from \"../../lib\";\r\nimport { IComplexNumber } from \"../../lib/complex\";\r\nimport \"./sampling-canvas.scss\";\r\n\r\ninterface IProps {\r\n    samples: IComplexNumber[],\r\n    hideMarkers?: boolean;\r\n}\r\n\r\ninterface IState {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport class SamplingCanvas extends Component<IProps, IState> {\r\n    canvas: HTMLCanvasElement | null = null;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            width: 1024,\r\n            height: 300\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.drawTimeDomain();\r\n    }\r\n\r\n    drawGrid(ctx: CanvasRenderingContext2D) {\r\n        const { width, height } = this.state;\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        ctx.setLineDash([1, 2])\r\n        ctx.lineWidth = 1;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, height / 2);\r\n        ctx.lineTo(width, height / 2);\r\n        ctx.strokeStyle = \"#000000\";\r\n        ctx.stroke();\r\n        ctx.setLineDash([]);\r\n    }\r\n\r\n    drawTimeDomain() {\r\n        const { width, height } = this.state;\r\n\r\n        const { canvas } = this;\r\n        if (!canvas) return;\r\n\r\n        const ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) return;\r\n\r\n        this.drawGrid(ctx);\r\n\r\n        const { samples, hideMarkers } = this.props;\r\n        if (!samples) return;\r\n\r\n        const yAxis = height / 2;\r\n\r\n        const values = samples.map((s, idx): IPoint2D => ({\r\n            x: idx,\r\n            y: s.r\r\n        }))\r\n\r\n        const maxY = Math.max(...values.map(v => v.y));\r\n        const minY = Math.min(...values.map(v => v.y));\r\n        const absMaxY = Math.max(Math.abs(maxY), Math.abs(minY));\r\n\r\n        const maxScaleY = 30;\r\n        const scaleY = Convert.between((yAxis - 20) / absMaxY, 1, maxScaleY);\r\n        const scaleX = width / samples.length;\r\n\r\n        ctx.lineWidth = 1;\r\n        ctx.imageSmoothingEnabled = true;\r\n\r\n        const translate = (p: IPoint2D) => {\r\n            return {\r\n                x: scaleX * p.x,\r\n                y: yAxis - scaleY * p.y\r\n            };\r\n        }\r\n\r\n        // sampling markers\r\n        if (!hideMarkers) {\r\n            for (const value of values) {\r\n                const from = translate(value);\r\n                ctx.beginPath();\r\n                ctx.arc(from.x, from.y, 1, 0, 2 * Math.PI);\r\n                ctx.stroke();\r\n            }\r\n        }\r\n\r\n        ctx.beginPath();\r\n        for (let i = 0; i < values.length - 1; i++) {\r\n            const from = translate(values[i]);\r\n            const to = translate(values[i + 1]);\r\n\r\n            ctx.moveTo(from.x, from.y);\r\n            ctx.lineTo(to.x, to.y);\r\n        }\r\n        ctx.stroke();\r\n\r\n        const maxLine = translate({ x: maxY, y: maxY });\r\n        CanvasTools.drawMaxLine(ctx, absMaxY, maxLine.y, width);\r\n\r\n        const minLine = translate({ x: minY, y: minY });\r\n        CanvasTools.drawMinLine(ctx, minY, minLine.y, width);\r\n\r\n        ctx.font = \"15px Arial\";\r\n        const scaleText = `Scale: ${scaleY}`;\r\n        const measure = ctx.measureText(scaleText);\r\n        ctx.fillText(scaleText, width - measure.width, 15);\r\n    }\r\n\r\n    render() {\r\n        const { width, height } = this.state;\r\n\r\n        return <canvas\r\n            width={width}\r\n            height={height}\r\n            className=\"sampling-canvas\"\r\n            ref={(r) => {\r\n                this.canvas = r;\r\n                this.drawTimeDomain();\r\n            }}\r\n        />\r\n    }\r\n}","C:\\code\\dsp-playground\\src\\components\\drawing-canvas\\drawing-canvas.tsx",["187","188","189","190","191","192","193","194","195"],"import { Component } from \"react\";\r\nimport { BufferStream, CanvasTools, Clone, Convert, Generate, IPoint2D, Sampling, Signal } from \"../../lib\";\r\nimport { IComplexNumber } from \"../../lib/complex\";\r\nimport \"./drawing-canvas.scss\";\r\n\r\ninterface IProps {\r\n    onChange: (samples: IPoint2D[]) => void;\r\n}\r\n\r\ninterface IState {\r\n    samples: IPoint2D[];\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport class DrawingCanvas extends Component<IProps, IState> {\r\n    canvas: HTMLCanvasElement | null = null;\r\n    buffer: BufferStream<IPoint2D> | null = null;\r\n\r\n    enabled = false;\r\n    lastPoint: IPoint2D | null = null;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            samples: Generate.range(0, 1024).map((i): IPoint2D => ({ x: i, y: 0 })),\r\n            width: 1024,\r\n            height: 300\r\n        }\r\n\r\n        this.onMouseUp = this.onMouseUp.bind(this);\r\n        document.addEventListener(\"mouseup\", this.onMouseUp);\r\n\r\n        this.processPoints = this.processPoints.bind(this);\r\n        this.buffer = new BufferStream<IPoint2D>(20, this.processPoints);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mouseup\", this.onMouseUp);\r\n    }\r\n\r\n    onMouseUp(e: Event) {\r\n        if (!this.enabled) return;\r\n\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.enabled = false;\r\n        this.lastPoint = null;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.drawSignal();\r\n    }\r\n\r\n    drawGrid(ctx: CanvasRenderingContext2D) {\r\n        const { width, height } = this.state;\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        ctx.setLineDash([1, 2])\r\n        ctx.lineWidth = 1;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, height / 2);\r\n        ctx.lineTo(width, height / 2);\r\n        ctx.strokeStyle = \"#000000\";\r\n        ctx.stroke();\r\n        ctx.setLineDash([]);\r\n    }\r\n\r\n    translate(p: IPoint2D) {\r\n        const { width, height } = this.state;\r\n\r\n        const yAxis = height / 2;\r\n\r\n        return {\r\n            x: Math.round(p.x),\r\n            y: yAxis - p.y\r\n        };\r\n    }\r\n\r\n    drawSignal() {\r\n        const { canvas } = this;\r\n        if (!canvas) return;\r\n\r\n        const ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) return;\r\n\r\n        this.drawGrid(ctx);\r\n\r\n        const { samples } = this.state;\r\n\r\n        ctx.lineWidth = 1;\r\n        ctx.imageSmoothingEnabled = true;\r\n\r\n        ctx.beginPath();\r\n        for (let i = 0; i < samples.length - 1; i++) {\r\n            const from = this.translate(samples[i]);\r\n            const to = this.translate(samples[i + 1]);\r\n\r\n            ctx.moveTo(from.x, from.y);\r\n            ctx.lineTo(to.x, to.y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    processPoints(points: IPoint2D[]) {\r\n        const { onChange } = this.props;\r\n\r\n        for (const pt of points) {\r\n            const { lastPoint } = this;\r\n            if (lastPoint && pt.x !== lastPoint.x) {\r\n                const dx = pt.x - lastPoint.x;\r\n                const dy = pt.y - lastPoint.y;\r\n\r\n                Generate\r\n                    .inclusive(lastPoint.x, pt.x)\r\n                    .forEach((i, idx) => {\r\n                        this.state.samples[i].y = lastPoint.y + idx * dy / dx;\r\n                    })\r\n\r\n            }\r\n            else {\r\n                this.state.samples[pt.x].y = pt.y;\r\n            }\r\n\r\n            this.lastPoint = pt;\r\n        }\r\n\r\n        this.drawSignal();\r\n        onChange([...this.state.samples]);\r\n    }\r\n\r\n    setPosition(e: React.MouseEvent<HTMLCanvasElement>) {\r\n        if (!this.canvas) return;\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        var rect = this.canvas.getBoundingClientRect();\r\n        const pt = this.translate({ x: e.clientX - rect.left, y: e.clientY - rect.top });\r\n        this.buffer?.next(pt);\r\n    }\r\n\r\n    render() {\r\n        const { width, height } = this.state;\r\n\r\n        return <canvas\r\n            width={width}\r\n            height={height}\r\n            className=\"drawing-canvas\"\r\n            onMouseDown={(e) => {\r\n                this.enabled = true;\r\n                this.setPosition(e);\r\n            }}\r\n            onMouseMove={(e) => {\r\n                if (!this.enabled) return;\r\n                this.setPosition(e);\r\n            }}\r\n            ref={(r) => {\r\n                this.canvas = r;\r\n                this.drawSignal();\r\n            }}\r\n        />\r\n    }\r\n}","C:\\code\\dsp-playground\\src\\lessons\\lesson3.tsx",["196","197","198","199","200","201","202","203","204","205","206","207","208"],"import React, { Component } from \"react\";\r\nimport { SignalEditor, TimeDomainCanvas, ComplexCanvas, IWaveEditorConfig, FreqDomainCanvas, SamplingCanvas, DrawingCanvas } from \"../components\";\r\nimport { DFT, FFT, ftDirection, Generate, IPoint2D, Sampling, Signal } from \"../lib\";\r\nimport { IComplexNumber } from \"../lib/complex\";\r\nimport { Filter } from \"../lib/filter\";\r\nimport { LessonParameters } from \"./lesson\";\r\nimport { LessonParametersControl } from \"./lesson-parameters-control\";\r\n\r\n\r\ninterface IState {\r\n    lessonParameters: LessonParameters;\r\n    samples: IComplexNumber[];\r\n}\r\n\r\nexport class Lesson3 extends Component<{}, IState> {\r\n    constructor(props: {}) {\r\n        super(props)\r\n        this.state = {\r\n            lessonParameters: new LessonParameters({\r\n                samplingRate: 1024,\r\n                duration: 1,\r\n                stretch: 20\r\n            }),\r\n            samples: Generate.range(0, 1024).map(s => ({ r: 0, i: 0 }))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { samples, lessonParameters } = this.state;\r\n        const { samplingRate, duration, stretch, showWaves } = lessonParameters;\r\n\r\n        const lessonConfig: IWaveEditorConfig = {\r\n            amplitude: { min: 0, max: 10 },\r\n            freqHz: { min: 0, max: 1024 },\r\n            phaseRad: { min: 0, max: 2 * Math.PI }\r\n        };\r\n\r\n        const rawSpectre = FFT\r\n            .transform(samples, ftDirection.Forward);\r\n        const reconstructed = FFT.transform(rawSpectre, ftDirection.Backward);\r\n\r\n        return (\r\n            <div className=\"lesson-layout\">\r\n                <div>\r\n                    <LessonParametersControl parameters={lessonParameters} onChange={(p) => this.setState({ lessonParameters: p })} />\r\n                </div>\r\n                <div className=\"lesson-layout-visual\">\r\n                    <DrawingCanvas onChange={(p) => {\r\n                        this.setState({\r\n                            samples: p.map((s): IComplexNumber => ({ r: s.y, i: 0 }))\r\n                        })\r\n                    }} />\r\n                    <SamplingCanvas samples={reconstructed} hideMarkers />\r\n                    <FreqDomainCanvas samples={samples} type={lessonParameters.type} absValues={lessonParameters.absValues} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\code\\dsp-playground\\src\\lib\\buffer-stream.ts",[],"C:\\code\\dsp-playground\\src\\lib\\clone.ts",[],"C:\\code\\dsp-playground\\src\\lib\\filter.ts",[],"C:\\code\\dsp-playground\\src\\lessons\\lesson-base.tsx",[],"C:\\code\\dsp-playground\\src\\lessons\\lesson0.tsx",["209","210","211"],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":3,"column":28,"nodeType":"218","messageId":"219","endLine":3,"endColumn":35},{"ruleId":"216","severity":1,"message":"220","line":4,"column":10,"nodeType":"218","messageId":"219","endLine":4,"endColumn":13},{"ruleId":"216","severity":1,"message":"221","line":4,"column":15,"nodeType":"218","messageId":"219","endLine":4,"endColumn":19},{"ruleId":"216","severity":1,"message":"222","line":4,"column":21,"nodeType":"218","messageId":"219","endLine":4,"endColumn":28},{"ruleId":"216","severity":1,"message":"223","line":4,"column":30,"nodeType":"218","messageId":"219","endLine":4,"endColumn":38},{"ruleId":"216","severity":1,"message":"224","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":26},{"ruleId":"225","severity":1,"message":"226","line":30,"column":42,"nodeType":"227","messageId":"228","endLine":30,"endColumn":44},{"ruleId":"225","severity":1,"message":"226","line":31,"column":42,"nodeType":"227","messageId":"228","endLine":31,"endColumn":44},{"ruleId":"216","severity":1,"message":"229","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":17},{"ruleId":"216","severity":1,"message":"230","line":3,"column":63,"nodeType":"218","messageId":"219","endLine":3,"endColumn":71},{"ruleId":"216","severity":1,"message":"231","line":3,"column":83,"nodeType":"218","messageId":"219","endLine":3,"endColumn":91},{"ruleId":"216","severity":1,"message":"232","line":3,"column":93,"nodeType":"218","messageId":"219","endLine":3,"endColumn":99},{"ruleId":"216","severity":1,"message":"233","line":13,"column":11,"nodeType":"218","messageId":"219","endLine":13,"endColumn":18},{"ruleId":"225","severity":1,"message":"226","line":72,"column":33,"nodeType":"227","messageId":"228","endLine":72,"endColumn":35},{"ruleId":"225","severity":1,"message":"234","line":82,"column":24,"nodeType":"227","messageId":"228","endLine":82,"endColumn":26},{"ruleId":"216","severity":1,"message":"235","line":2,"column":42,"nodeType":"218","messageId":"219","endLine":2,"endColumn":55},{"ruleId":"216","severity":1,"message":"236","line":2,"column":76,"nodeType":"218","messageId":"219","endLine":2,"endColumn":92},{"ruleId":"216","severity":1,"message":"237","line":3,"column":10,"nodeType":"218","messageId":"219","endLine":3,"endColumn":13},{"ruleId":"216","severity":1,"message":"238","line":29,"column":41,"nodeType":"218","messageId":"219","endLine":29,"endColumn":48},{"ruleId":"216","severity":1,"message":"239","line":29,"column":50,"nodeType":"218","messageId":"219","endLine":29,"endColumn":59},{"ruleId":"216","severity":1,"message":"230","line":2,"column":32,"nodeType":"218","messageId":"219","endLine":2,"endColumn":40},{"ruleId":"216","severity":1,"message":"231","line":2,"column":52,"nodeType":"218","messageId":"219","endLine":2,"endColumn":60},{"ruleId":"216","severity":1,"message":"232","line":2,"column":62,"nodeType":"218","messageId":"219","endLine":2,"endColumn":68},{"ruleId":"216","severity":1,"message":"240","line":2,"column":24,"nodeType":"218","messageId":"219","endLine":2,"endColumn":35},{"ruleId":"216","severity":1,"message":"241","line":2,"column":37,"nodeType":"218","messageId":"219","endLine":2,"endColumn":42},{"ruleId":"216","severity":1,"message":"242","line":2,"column":44,"nodeType":"218","messageId":"219","endLine":2,"endColumn":51},{"ruleId":"216","severity":1,"message":"231","line":2,"column":73,"nodeType":"218","messageId":"219","endLine":2,"endColumn":81},{"ruleId":"216","severity":1,"message":"232","line":2,"column":83,"nodeType":"218","messageId":"219","endLine":2,"endColumn":89},{"ruleId":"216","severity":1,"message":"243","line":3,"column":10,"nodeType":"218","messageId":"219","endLine":3,"endColumn":24},{"ruleId":"216","severity":1,"message":"244","line":71,"column":17,"nodeType":"218","messageId":"219","endLine":71,"endColumn":22},{"ruleId":"245","severity":1,"message":"246","line":118,"column":25,"nodeType":"247","endLine":118,"endColumn":46},{"ruleId":"245","severity":1,"message":"246","line":123,"column":17,"nodeType":"247","endLine":123,"endColumn":41},{"ruleId":"216","severity":1,"message":"248","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":22},{"ruleId":"216","severity":1,"message":"249","line":2,"column":24,"nodeType":"218","messageId":"219","endLine":2,"endColumn":40},{"ruleId":"216","severity":1,"message":"235","line":2,"column":42,"nodeType":"218","messageId":"219","endLine":2,"endColumn":55},{"ruleId":"216","severity":1,"message":"237","line":3,"column":10,"nodeType":"218","messageId":"219","endLine":3,"endColumn":13},{"ruleId":"216","severity":1,"message":"250","line":3,"column":43,"nodeType":"218","messageId":"219","endLine":3,"endColumn":51},{"ruleId":"216","severity":1,"message":"231","line":3,"column":53,"nodeType":"218","messageId":"219","endLine":3,"endColumn":61},{"ruleId":"216","severity":1,"message":"232","line":3,"column":63,"nodeType":"218","messageId":"219","endLine":3,"endColumn":69},{"ruleId":"216","severity":1,"message":"251","line":5,"column":10,"nodeType":"218","messageId":"219","endLine":5,"endColumn":16},{"ruleId":"216","severity":1,"message":"252","line":30,"column":17,"nodeType":"218","messageId":"219","endLine":30,"endColumn":29},{"ruleId":"216","severity":1,"message":"253","line":30,"column":31,"nodeType":"218","messageId":"219","endLine":30,"endColumn":39},{"ruleId":"216","severity":1,"message":"238","line":30,"column":41,"nodeType":"218","messageId":"219","endLine":30,"endColumn":48},{"ruleId":"216","severity":1,"message":"239","line":30,"column":50,"nodeType":"218","messageId":"219","endLine":30,"endColumn":59},{"ruleId":"216","severity":1,"message":"254","line":32,"column":15,"nodeType":"218","messageId":"219","endLine":32,"endColumn":46},{"ruleId":"216","severity":1,"message":"224","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":26},{"ruleId":"216","severity":1,"message":"236","line":2,"column":76,"nodeType":"218","messageId":"219","endLine":2,"endColumn":92},{"ruleId":"216","severity":1,"message":"255","line":45,"column":15,"nodeType":"218","messageId":"219","endLine":45,"endColumn":22},"no-native-reassign",["256"],"no-negated-in-lhs",["257"],"@typescript-eslint/no-unused-vars","'Lesson3' is defined but never used.","Identifier","unusedVar","'Tab' is defined but never used.","'Tabs' is defined but never used.","'TabList' is defined but never used.","'TabPanel' is defined but never used.","'Component' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Context' is defined but never used.","'Generate' is defined but never used.","'Sampling' is defined but never used.","'Signal' is defined but never used.","'IFreq2D' is defined but never used.","Expected '!==' and instead saw '!='.","'ComplexCanvas' is defined but never used.","'FreqDomainCanvas' is defined but never used.","'DFT' is defined but never used.","'stretch' is assigned a value but never used.","'showWaves' is assigned a value but never used.","'CanvasTools' is defined but never used.","'Clone' is defined but never used.","'Convert' is defined but never used.","'IComplexNumber' is defined but never used.","'width' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'SignalEditor' is defined but never used.","'TimeDomainCanvas' is defined but never used.","'IPoint2D' is defined but never used.","'Filter' is defined but never used.","'samplingRate' is assigned a value but never used.","'duration' is assigned a value but never used.","'lessonConfig' is assigned a value but never used.","'samples' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]